datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // output   = "src/lib/prisma"
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  organizations UsersOnOrganizations[]
  subCatalogues SubCatalogue[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// END OF USER PART
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

enum MemberRole {
  ADMIN
  EDITOR
  MEMBER
}

model Organization {
  id              String @id @default(uuid())
  name            String
  siret           String
  email           String
  phone           String
  city            String
  catalogues      Catalogue[]
  members         UsersOnOrganizations[]
  contactId       String // userId of one member

  @@map("Organization")
}

model UsersOnOrganizations {
  userId            String // relation scalar field (used in the `@relation` attribute above)
  user              User     @relation(fields: [userId], references: [id])
  organizationId    String
  organization      Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  assignedAt        DateTime @default(now())
  assignedBy        String // Id of the member
  role              MemberRole

  @@id([organizationId, userId])
}

model Catalogue {
  id                String @id @default(uuid())
  name              String
  products          Product[]
  subCatalogues     SubCatalogue[]
  organizationId    String
  organization      Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("Catalogue")
}

model SubCatalogue {
  id                String @id @default(uuid())
  products          ProductOnSubCatalogue[]
  customerId        String
  customer          User      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  catalogueId       String
  catalogue         Catalogue      @relation(fields: [catalogueId], references: [id], onDelete: Cascade)

  @@map("SubCatalogue")
}

model ProductOnSubCatalogue {
  productId         String // relation scalar field (used in the `@relation` attribute above)
  product           Product         @relation(fields: [productId], references: [id])
  subCatalogueId    String
  subCatalogue      SubCatalogue    @relation(fields: [subCatalogueId], references: [id], onDelete: Cascade)
  assignedAt        DateTime @default(now())
  assignedBy        String // Id of the member
  price             Int

  @@id([subCatalogueId, productId])
}

model Product {
  id                      String @id @default(uuid())
  name                    String
  description             String
  price                   Int
  catalogueId             String
  catalogue               Catalogue      @relation(fields: [catalogueId], references: [id], onDelete: Cascade)
  productOnSubCatalogues  ProductOnSubCatalogue[]

  @@map("Product")
}